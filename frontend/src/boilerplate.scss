/*
  You will find a collection of assets, variables and snippets of code.
  Furthermore some basic mixins are implemented -
  check SASS-Boilerplate Docu for further information: https://github.com/jakepanter/better-spotify/wiki/SASS-Documentation
*/

// Imports
@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300;400;700&family=Roboto:ital,wght@0,300;0,400;0,700;1,300;1,400&display=swap');

/*
   Variables Setup
*/

// colors
$none: none;
$transparent: transparent;
$black: #000 !default;
$white: #fff !default;
$gray-dark: #CDCECD !default;
$gray: #E4E3E2 !default;
$gray-light: #F2F2F2 !default;

// project base colors
$color-background: #0C141D !default;
$color-primary: #008FF7 !default;
$color-secondary: #18283A !default;
$color-default: #CDCECD  !default;

// project special colors
$color-accent-dark: #2F4766 !default;
$color-accent-darker: #008FF7 !default;
$color-accent-darkest: #0072C5 !default;
$color-waring-dark: #F47960 !default;
$color-waring-darker: #EA5030 !default;
$color-waring-darkest: #D83010 !default;
$color-positive-dark: #35DF91 !default;
$color-positive-darker: #1EB972 !default;
$color-positive-darkest: #188D58 !default;


// Sizes
$breakpoint-sm: 48rem !default; // ~ 768px
$breakpoint-md: 61rem !default; // ~ 976px
$breakpoint-lg: 75rem !default; // ~ 1200px
$breakpoint-xl: 100rem !default; // ~ 1600px

// Panels
$side-panel-size: 90px;

// padding
$spacer: 2rem !default;
$padding-vertical: $spacer/2 !default;
$padding-horizontal: $spacer !default;

// borders
$border-width: 1px !default;
$border-color: $color-primary;
$border-style: solid;
$border-radius: 5px !default;

// transitions
$transition-base: all 0.5s ease-in-out !default;
$transition-fade: opacity .2s linear !default;

// fonts
$font-default: 'Roboto' !default;
$font-special: 'Roboto Condensed' !default;

$fz-base: 16px !default;
$lh-base: 1.5rem !default;
$ls-base: 0px !default;
$fw-base: 400 !default;
$fs-base: normal !default;
$fw-bold: 700 !default;

// shadows
$text-shadow: 0 0 1px rgba($gray-light, .7) !default;
$box-shadow: 0 0 ($spacer/2) rgba($gray-light, .7) !default;

// Text - links
$link-color: $color-default !default;
$link-hover-color: $color-primary !default;
$link-decoration: none !default;
$link-hover-decoration: underline !default;

// Text - Headlines
$color-headlines: $color-primary !default;
$ff-headlines: $font-special !default;
$lh-headlines: 1.5 !default;
$fw-headlines: $fw-bold !default;
$ls-headlines: 0px !default;
$fs-headlines: normal !default;
$fz-h1: 40px !default;
$fz-h2: 32px !default;
$fz-h3: 28px !default;
$fz-h4: 24px !default;
$fz-h5: 20px !default;
$fz-h6: 18px !default;

// tables
$table-cell-padding: .75rem !default;
$table-bg: transparent !default;
$table-border-width: $border-width !default;
$table-border-color: $gray-light !default;
$table-head-bg: $gray-light !default;
$table-head-color: $gray !default;

// Buttons
$button-background: $color-primary !default;
$button-background-active: none !default;
$button-color: $white !default;
$button-color-active: $color-primary !default;
$ff-buttons: $font-default !default;
$lh-buttons: 1.5 !default;
$ls-buttons: 0px !default;
$fw-buttons: $fw-base !default;
$tt-buttons: none !default;
$button-border-style: solid !default;
$button-border-width: 1px !default;
$button-border-color: $color-primary !default;
$button-border-color-active: $color-primary !default;
$button-border-radius: 0px !default;
$button-padding-horizontal: 10px !default;
$button-padding-vertical: 15px !default;
$button-transition-base: $transition-base !default;


/*
   STANDARD MIXINS
*/
@mixin columns(
  $columns: 3,
  $columns-md: $columns,
  $columns-xs: 1,
  $margin: 2rem,
  $margin-md: $margin,
  $margin-xs: 1rem,
  $box-padding: 1rem,
  $box-padding-md: $box-padding,
  $box-padding-xs: 1rem
) {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  padding: $padding-horizontal $padding-vertical;
  .column {
    width: calc(100% / #{$columns} - #{$margin} / 2);
    //border: $border-width $border-style $border-color;
    border-radius: $border-radius;
    padding: $box-padding;
    box-sizing: border-box;
    overflow: hidden;

    &:not(:last-child) {
      margin-right: $margin;
    }
  }

  // breakpoint tablet
  @media screen and(max-width: $breakpoint-md) {
    .column {
      width: calc(100% / #{$columns-md} - #{$margin-md} / 2);
      padding: $box-padding-md;

      &:not(:last-child) {
        margin-right: $margin-md;
      }
    }
  }

  // breakpoint phone
  @media screen and(max-width: $breakpoint-sm) {
    .column {
      width: calc(100% / #{$columns-xs} - #{$margin-xs} * 2);
      padding: $box-padding-xs;
      margin-left: $margin-xs;
      margin-right: $margin-xs !important; // important necessary, because we have to overwrite values from desktop

      &:not(:last-child) {
        margin-bottom: $margin-xs;
      }
    }
  }
};

/*
  Make sure, you used "grid-box"-class for all child container
  You have the option of using "auto" grid - this has a basic style, see if it fits for your case
  -> It is also possible to use auto an manipulate the css via custom css
  -------------------------------------------------
  If you want to build a manual grid, implement this mixin anyway:
  set the number for your grid with "$grid-template-columns"
  used "grid-box"-class for all child container
  then you are able to add the basic grid css

  .grid-box:nth-child(1) {
    grid-column:1/2;
    grid-row: 1/2;
  }
  You just need the code for the childes, rest should work
  https://css-tricks.com/snippets/css/complete-guide-grid/
*/

@mixin grid(
  $grid: auto, // "auto" or "manual"
  $grid-template-columns: 4, // 3,4,6,8,12 ...
  $grid-template-columns-md: 3, // 3,4,6,8,12 ...
  $grid-unequal: false, // false or true
  $margin: 1rem,
  $margin-md: 1rem,
  $margin-sm: 1rem
) {
  $grid-template-rows: floor($grid-template-columns/2);
  $grid-items: if($grid-template-rows < 2, 3, ($grid-template-rows * $grid-template-rows) + 1);
  $grid-first: 1;
  $grid-end: ($grid-items + $grid-first + $grid-template-rows);

  //TABLET
  $grid-template-rows-md: floor($grid-template-columns-md/2);
  $grid-items-md: if($grid-template-rows-md < 2, 3, ($grid-template-rows-md * $grid-template-rows-md) + 1);
  $grid-end-md: ($grid-items-md + $grid-first + $grid-template-rows-md);


  @supports (display: grid) {
    display: grid;
    grid-auto-flow: dense;

    grid-template-columns: repeat($grid-template-columns, 1fr);
    grid-template-rows: repeat(calc(max(#{ $grid-template-rows} , 2)), 1fr);

    @media screen and (max-width: $breakpoint-md) {
      grid-template-columns: repeat($grid-template-columns-md, 1fr);
      grid-template-rows: repeat(calc(max(#{ $grid-template-rows-md} , 2)), 1fr);
    }

    @media screen and (max-width: $breakpoint-sm) {
      display: flex;
      max-width: 100%;
      flex-direction: column;
      padding: $margin-sm;
    }
  }
  .grid-box {
    background: $color-primary;
    margin: calc(#{$margin} / 2);

    @media screen and (max-width: $breakpoint-md) {
      margin: calc(#{$margin-md} / 2);
    }

    @media screen and(max-width: $breakpoint-sm) {
      margin: 0 0 $margin-sm 0;
      &:last-child {
        margin-bottom: 0;
      }
    }
    @if $grid == "auto" {
      @media screen and (min-width: $breakpoint-md) {

        @if $grid-unequal == true {
          // Grid implementation
          &:nth-child(#{2*$grid-items}n+#{$grid-first}),
          &:nth-child(#{2*$grid-items}n+#{$grid-end}) {
            grid-column: span calc(max( #{ $grid-template-rows} ,2)) / auto;
            grid-row: auto / span calc(max(#{ $grid-template-rows} , 2));
          }
        } @else {
          &:nth-child(#{2*$grid-items}n+#{$grid-first}),
          &:nth-child(#{$grid-items}n+#{$grid-first}) {
            grid-column: span calc(max( #{ $grid-template-rows} ,2)) / auto;
            grid-row: auto / span calc(max(#{ $grid-template-rows} , 2));
          }
        }
      }
      @media screen and (max-width: $breakpoint-md) {
        @if $grid-unequal == true {
          // Grid implementation
          &:nth-child(#{2*$grid-items-md}n+#{$grid-first}),
          &:nth-child(#{2*$grid-items-md}n+#{$grid-end-md}) {
            grid-column: span calc(max( #{ $grid-template-rows-md} ,2)) / auto;
            grid-row: auto / span calc(max(#{ $grid-template-rows-md} , 2));
          }
        } @else {
          &:nth-child(#{2*$grid-items-md}n+#{$grid-first}),
          &:nth-child(#{$grid-items-md}n+#{$grid-first}) {
            grid-column: span calc(max( #{ $grid-template-rows-md} ,2)) / auto;
            grid-row: auto / span calc(max(#{ $grid-template-rows-md} , 2));
          }
        }
      }
    }
  }
};