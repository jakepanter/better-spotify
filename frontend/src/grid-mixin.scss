@import "boilerplate";

/*
  You have the option of using "auto" gird with the following settings
  $grid-template-columns, $grid-unequal, $margin
  -------------------------------------------------
  If you want to build a manual grid,
  use the following settings:
  to work manually you should know grid or have a look at the docu.
*/

@mixin grid(
  $grid: auto, // "auto" or "manual"
  $grid-template-columns: 3, // 3,4,6,8,12 ...
  $grid-unequal: false, // false or true
  $margin: 1rem
){
  $grid-template-rows: floor($grid-template-columns/2);
  $grid-items: if($grid-template-rows < 2, 3, ($grid-template-rows * $grid-template-rows) + 1);
  $grid-first: 1;
  $grid-end: ($grid-items + $grid-first + $grid-template-rows);

  @supports (display: grid) {
    display: grid;
    grid-auto-flow: dense;

    grid-template-columns: repeat($grid-template-columns, 1fr);
    grid-template-rows: repeat(calc(max(#{ $grid-template-rows} ,2)), 1fr);

    @media screen and (max-width: $breakpoint-md) {
      // fill later
    }

    @media screen and (max-width: $breakpoint-sm) {
      display: flex;
      max-width: 100% !important;
    }
  }
  .box {
    background: green;
    margin: calc(#{$margin} / 2);

    @media screen and(max-width: $breakpoint-sm) {
      margin: 0 0 0 calc(#{$margin} / 2);
    }
    @if $grid-unequal == true {
      // Grid implementation
      &:nth-child(#{2*$grid-items}n+#{$grid-first}),
      &:nth-child(#{2*$grid-items}n+#{$grid-end}) {
        grid-column: span calc(max( #{ $grid-template-rows} ,2)) / auto;
        grid-row: auto / span calc(max(#{ $grid-template-rows} , 2));
      }
    }
    @else{
      &:nth-child(#{2*$grid-items}n+#{$grid-first}),
      &:nth-child(#{$grid-items}n+#{$grid-first}) {
        grid-column: span calc(max( #{ $grid-template-rows} ,2)) / auto;
        grid-row: auto / span calc(max(#{ $grid-template-rows} , 2));
      }
    }
  }
};